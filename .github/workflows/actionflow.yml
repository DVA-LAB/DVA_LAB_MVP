name: Run DVA LAB Application in Anaconda Environment

on: [push]

jobs:
  run-backend-app:
    runs-on: self-hosted
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Anaconda environment
      run: |
        source ~/anaconda3/etc/profile.d/conda.sh
        conda activate backend

    - name: Check if port 8000 is in use
      run: |
        PID=$(lsof -t -i:8000 -sTCP:LISTEN) || true
        if [ -z "$PID" ]; then
          echo "No process found on port 8000. Proceeding to start the app."
        else
          echo "Killing process on port 8000 with PID $PID"
          kill $PID
        fi
    
    - name: Run app.py in backend environment
      run: |
        source ~/anaconda3/etc/profile.d/conda.sh
        conda activate backend
        cd /home/dva4/DVA_LAB/backend/
        nohup python app.py > backend.out

  run-bev-app:
    runs-on: self-hosted
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Anaconda environment
      run: |
        source ~/anaconda3/etc/profile.d/conda.sh
        conda activate orthophoto

    - name: Check if port 8001 is in use
      run: |
        PID=$(lsof -t -i:8001 -sTCP:LISTEN) || true
        if [ -z "$PID" ]; then
          echo "No process found on port 8001. Proceeding to start the app."
        else
          echo "Killing process on port 8001 with PID $PID"
          kill $PID
        fi
    
    - name: Run app.py in orthophoto environment
      run: |
        source ~/anaconda3/etc/profile.d/conda.sh
        conda activate orthophoto
        cd /home/dva4/DVA_LAB/models/BEV/
        nohup python app.py > BEV.out

  run-bytetrack-app:
    runs-on: self-hosted
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Anaconda environment
      run: |
        source ~/anaconda3/etc/profile.d/conda.sh
        conda activate bytetrack

    - name: Check if port 8004 is in use
      run: |
        PID=$(lsof -t -i:8004 -sTCP:LISTEN) || true
        if [ -z "$PID" ]; then
          echo "No process found on port 8004. Proceeding to start the app."
        else
          echo "Killing process on port 8004 with PID $PID"
          kill $PID
        fi
    
    - name: Run app.py in bytetrack environment
      run: |
        source ~/anaconda3/etc/profile.d/conda.sh
        conda activate bytetrack
        cd /home/dva4/DVA_LAB/models/bytetrack/
        nohup python app.py > bytetrack.out

  run-detection-app:
    runs-on: self-hosted
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Anaconda environment
      run: |
        source ~/anaconda3/etc/profile.d/conda.sh
        conda activate detection

    - name: Check if port 8002 is in use
      run: |
        PID=$(lsof -t -i:8002 -sTCP:LISTEN) || true
        if [ -z "$PID" ]; then
          echo "No process found on port 8002. Proceeding to start the app."
        else
          echo "Killing process on port 8002 with PID $PID"
          kill $PID
        fi
    
    - name: Run app.py in detection environment
      run: |
        source ~/anaconda3/etc/profile.d/conda.sh
        conda activate detection
        cd /home/dva4/DVA_LAB/models/sahi_detection/
        nohup python app.py > detection.out

  run-refinement-app:
    runs-on: self-hosted
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Anaconda environment
      run: |
        source ~/anaconda3/etc/profile.d/conda.sh
        conda activate refinement

    - name: Check if port 8005 is in use
      run: |
        PID=$(lsof -t -i:8005 -sTCP:LISTEN) || true
        if [ -z "$PID" ]; then
          echo "No process found on port 8005. Proceeding to start the app."
        else
          echo "Killing process on port 8005 with PID $PID"
          kill $PID
        fi
    
    - name: Run app.py in refinement environment
      run: |
        source ~/anaconda3/etc/profile.d/conda.sh
        conda activate refinement
        cd /home/dva4/DVA_LAB/models/refiner/
        nohup python app.py > refiner.out
